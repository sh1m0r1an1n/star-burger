version: '3.8'

services:
  db:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: star_burger_prod
      POSTGRES_USER: star_burger_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped

  backend:
    build:
      context: .
      dockerfile: Dockerfile.prod
    environment:
      - DEBUG=False
      - DATABASE_URL=postgres://star_burger_user:${POSTGRES_PASSWORD}@db:5432/star_burger_prod
      - SECRET_KEY=${SECRET_KEY}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS}
      - YANDEX_GEOCODER_API_KEY=${YANDEX_GEOCODER_API_KEY}
      - ROLLBAR_ACCESS_TOKEN=${ROLLBAR_ACCESS_TOKEN}
      - ROLLBAR_ENVIRONMENT=${ROLLBAR_ENVIRONMENT}
      - ROLLBAR_BRANCH=${ROLLBAR_BRANCH}
    volumes:
      - media_volume:/app/media
      - static_volume:/app/staticfiles
    depends_on:
      - db
    restart: unless-stopped
    command: gunicorn --bind 0.0.0.0:8000 --workers 3 star_burger.wsgi:application

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.prod.https.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./bundles:/app/bundles:ro
      - static_volume:/app/staticfiles:ro
      - media_volume:/app/media:ro
    depends_on:
      - backend
    restart: unless-stopped

volumes:
  postgres_data:
  static_volume:
  media_volume: